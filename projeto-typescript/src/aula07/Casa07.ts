/*
ALGORITMO DO DEVER 

1. Criar uma interface chamada Shape:
Definir um m√©todo abstrato chamado calculateArea que retorna um n√∫mero (number).
===============================
2. Criar a classe Circle:
Adicionar um construtor que recebe o raio (radius) como par√¢metro.
Implementar o m√©todo calculateArea:
Retornar F√≥rmula para a √°rea: area = ùúã √ó (radius^2)
==============================
3. Criar a classe Rectangle:
Adicionar um construtor que recebe largura (width) e altura (height) como par√¢metros.
Implementar o m√©todo calculateArea:
Retornar F√≥rmula para a √°rea: area=width√óheight.
==============================
4. Criar a classe Triangle:
Adicionar um construtor que recebe a base (base) e a altura (height) como par√¢metros.
Implementar o m√©todo calculateArea:
F√≥rmula para a √°rea:  area= 0.5√ó base √ó height.
==============================
5. Criar a fun√ß√£o printArea:
Receber um array de objetos do tipo Shape como par√¢metro.
Para cada objeto no array:
Chamar o m√©todo calculateArea para calcular a √°rea.
Imprimir a √°rea no console.
==============================
6. Testar a fun√ß√£o com inst√¢ncias das classes:
Criar inst√¢ncias de Circle, Rectangle e Triangle com valores espec√≠ficos.
Inserir as inst√¢ncias em um array de objetos do tipo Shape.
Chamar a fun√ß√£o printArea passando o array como argumento.

*/
interface Shape { // declaro a interface
    calculateArea(): number; // declaro o m√©todo abstrato 
}

class Circle implements Shape {
    constructor(public radius: number) { }
    calculateArea(): number {
        return Math.PI * this.radius * this.radius;
    }
}

class Rectangle implements Shape {
 constructor(public width: number, public height: number ) {}
  calculateArea(): number {
      return this.width * this.height;
  }
}

class Triangle implements Shape {
    constructor ( public base: number , public height: number ) {} // adicionar construtor com propriedades que v√£o ser usadas na f√≥rmula
    calculateArea(): number { // chama o m√©todo abstrato da interface
        return 0.5 * this.base * this.height;   } // retorna a f√≥rmula da √°rea
}

function printArea(shapes: Shape[]): void { // estabelecemos o array ( shapes : Shape[]) void indica que a fun√ß√£o n√£o retorna nenhum valor 
    for (const Shape of shapes) {  // " para cada elemento( shape ) do array shapes"
        console.log(Shape.calculateArea()); // imprimir a √°rea no console
    }
}

const shapes: Shape[] = [
    new Circle(5),
    new Rectangle(3, 4),
    new Triangle(2, 6)
];

printArea(shapes);

